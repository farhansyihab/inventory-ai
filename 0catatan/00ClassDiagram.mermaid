classDiagram

    note for MongoDBManager "Singleton pattern untuk MongoDB connection"
    
    %% ========== INTERFACES ==========
    class IRepository {
        <<interface>>
        +findById(string id) array|null
        +find(array filter = [], array options = []) array
        +create(array data) string
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter = []) int
        +findOne(array filter = []) array|null
    }

    class ICategoryRepository {
        <<interface>>
        +findBySlug(string slug) array|null
        +findActive() array
        +findByParentId(string parentId) array
        +findRootCategories() array
        +getCategoryTree() array
        +findByDepth(int depth) array
        +updatePath(string categoryId, array path, int depth) bool
        +slugExists(string slug, string excludeId = null) bool
        +getCategoriesWithCounts() array
        +bulkUpdateStatus(array categoryIds, bool active) bool
    }

    class IInventoryRepository {
        <<interface>>
        +find(array filter = [], array options = []) array
        +findById(string id) array|null
        +findOne(array filter = []) array|null
        +create(array data) string
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter = []) int
        +findLowStock(int threshold = 0) array
        +findOutOfStock() array
        +updateQuantity(string id, int quantityChange) bool
        +getStats() array
        +aggregate(array pipeline) array
    }

    class ISupplierRepository {
        <<interface>>
        +find(array filter = [], array options = []) array
        +findById(string id) array|null
        +findOne(array filter = []) array|null
        +create(array data) string
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter = []) int
        +findByCategory(string categoryId) array
        +getSupplierPerformance(string supplierId) array
        +findActiveSuppliers() array
        +getSupplierStats() array
    }

    class ITokenRepository {
        <<interface>>
        +storeRefreshToken(string tokenHash, string userId, DateTime expiresAt) bool
        +revokeRefreshToken(string tokenHash) bool
        +isRefreshTokenRevoked(string tokenHash) bool
        +findRefreshToken(string tokenHash) array|null
        +cleanupExpiredTokens() int
    }

    class IService {
        <<interface>>
        +findById(string id) array|null
        +find(array filter = [], array options = []) array
        +create(array data) array
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter = []) int
        +validate(array data) bool
        +findOne(array filter = []) array|null
    }

    class IAuthService {
        <<interface>>
        +register(array userData) array
        +login(string username, string password) array
        +refreshToken(string refreshToken) array
        +logout(string refreshToken) bool
        +verifyCredentials(string username, string password) array|false
        +changePassword(string userId, string currentPassword, string newPassword) bool
    }

    class IInventoryService {
        <<interface>>
        +getItem(string id) array|null
        +listItems(array filter = [], array options = []) array
        +createItem(array data) array
        +updateItem(string id, array data) array
        +deleteItem(string id) bool
        +getLowStockItems(int threshold = 0) array
        +getOutOfStockItems() array
        +updateItemQuantity(string id, int quantityChange) array
        +getInventoryStats() array
        +searchItems(string query, array options = []) array
        +validateItemData(array data, bool isCreate = true) array
        +getItemsByCategory(string categoryId, array options = []) array
        +getItemsBySupplier(string supplierId, array options = []) array
    }

    class ISupplierService {
        <<interface>>
        +getSupplier(string id) array|null
        +listSuppliers(array filter = [], array options = []) array
        +createSupplier(array data) array
        +updateSupplier(string id, array data) array
        +deleteSupplier(string id) bool
        +getSuppliersByCategory(string categoryId) array
        +getSupplierPerformance(string supplierId) array
        +getActiveSuppliers() array
        +getSupplierStats() array
        +validateSupplierData(array data, bool isCreate = true) array
    }

    class ITokenService {
        <<interface>>
        +generateAccessToken(array user) string
        +generateRefreshToken(array user) string
        +verifyAccessToken(string token) array|false
        +verifyRefreshToken(string token) array|false
        +revokeRefreshToken(string token) bool
        +isRefreshTokenRevoked(string token) bool
        +getAccessTokenExpiry() int
        +getRefreshTokenExpiry() int
    }

    class IAIService {
        <<interface>>
        +analyzeInventory(array inventoryData, string analysisType) array
        +generateReport(array inventoryData, string reportType) array
        +predictStockNeeds(array items, int forecastDays) array
        +detectAnomalies(array inventoryData) array
        +setStrategy(string strategyName) bool
        +getAvailableStrategies() array
        +isAvailable() bool
    }

    class IAdvancedAIService {
        <<interface>>
        +analyzeSalesTrends(array salesData, int periodDays) array
        +predictInventoryTurnover(array items) array
        +optimizeStockLevels(array inventoryData) array
        +generatePurchaseRecommendations(array supplierData) array
        +calculateSafetyStock(array itemHistory) array
        +analyzeInventoryWithStats(array inventoryData, string analysisType) array
    }

    class IInventoryAnalysisService {
        <<interface>>
        +getComprehensiveAnalysis(array options) array
        +generateWeeklyReport() array
        +monitorCriticalItems() array
        +predictInventoryNeeds(int forecastDays) array
        +optimizeInventory() array
    }

    class AIStrategy {
        <<interface>>
        +analyze(array data, string analysisType) array
        +generate(array data, string reportType) array
        +isAvailable() bool
    }

    class IReportBuilder {
        <<interface>>
        +buildReport(ReportDefinition definition) ReportResult
        +buildComparativeReport(ReportDefinition definition, array comparisonData) ReportResult
        +buildPredictiveReport(ReportDefinition definition, int forecastDays) ReportResult
        +buildRealTimeReport(ReportDefinition definition) ReportResult
    }

    class IReportingService {
        <<interface>>
        +generateReport(ReportDefinition definition) ReportResult
        +generateRealTimeReport(string type, array filters) ReportResult
        +scheduleReport(ReportSchedule schedule) string
        +cancelSchedule(string scheduleId) bool
        +getReportHistory(string reportType, DateRange range) array
        +exportReport(ReportResult result, string format) ExportJob
        +getExportStatus(string jobId) ExportJob
        +analyzeReportTrends(ReportResult current, ReportResult previous) array
        +generatePredictiveReport(string type, int forecastPeriod) ReportResult
        +getAvailableReportTypes() array
        +validateReportDefinition(ReportDefinition definition) array
        +testReportGeneration(ReportDefinition definition) ReportResult
    }

    class Middleware {
        <<interface>>
        +handle(Request request, callable next) Response
    }

    %% ========== DOMAIN MODELS ==========
    class Category {
        -id string|null
        -name string
        -slug string
        -description string
        -active bool
        -parentId string|null
        -depth int
        -path array
        -createdAt DateTime
        -updatedAt DateTime
        +__construct(string name, string slug, string description, bool active, string parentId, string id, DateTime createdAt, DateTime updatedAt)
        +getId() string|null
        +getName() string
        +getSlug() string
        +getDescription() string
        +isActive() bool
        +getParentId() string|null
        +getDepth() int
        +getPath() array
        +getCreatedAt() DateTime
        +getUpdatedAt() DateTime
        +setName(string name) void
        +setSlug(string slug) void
        +setDescription(string description) void
        +setActive(bool active) void
        +setParentId(string parentId) void
        +setDepth(int depth) void
        +setPath(array path) void
        +setUpdatedAt(DateTime updatedAt) void
        +validate() void
        +toDocument() array
        +fromDocument(array document) Category
        +toArray() array
        +__toString() string
        +isRoot() bool
        +hasChildren() bool
        +getFullPath() string
        -parseDate(mixed dateValue) DateTime
    }

    class User {
        -id string|null
        -username string
        -email string
        -passwordHash string
        -role string
        -createdAt DateTime
        -updatedAt DateTime
        +ROLE_ADMIN = 'admin'
        +ROLE_MANAGER = 'manager'
        +ROLE_STAFF = 'staff'
        +VALID_ROLES = [ROLE_ADMIN, ROLE_MANAGER, ROLE_STAFF]
        +__construct(string username, string email, string passwordHash, string role, string id, DateTime createdAt, DateTime updatedAt)
        +getId() string|null
        +getUsername() string
        +getEmail() string
        +getPasswordHash() string
        +getRole() string
        +getCreatedAt() DateTime
        +getUpdatedAt() DateTime
        +setUsername(string username) void
        +setEmail(string email) void
        +setPasswordHash(string hash) void
        +setRole(string role) void
        +setUpdatedAt(DateTime updatedAt) void
        +toDocument() array
        +fromDocument(mixed document) User
        -parseDate(mixed dateValue) DateTime
        +validate() void
        +isAdmin() bool
        +isManager() bool
        +isStaff() bool
        +toArray() array
        +__toString() string
    }

    class Inventory {
        -id string|null
        -name string
        -description string
        -quantity int
        -price float
        -categoryId string|null
        -supplierId string|null
        -minStockLevel int
        -createdAt DateTime
        -updatedAt DateTime
        +__construct(string name, string description, int quantity, float price, string categoryId, string supplierId, int minStockLevel, string id, DateTime createdAt, DateTime updatedAt)
        +getId() string|null
        +getName() string
        +getDescription() string
        +getQuantity() int
        +getPrice() float
        +getCategoryId() string|null
        +getSupplierId() string|null
        +getMinStockLevel() int
        +getCreatedAt() DateTime
        +getUpdatedAt() DateTime
        +setName(string name) void
        +setDescription(string description) void
        +setQuantity(int quantity) void
        +setPrice(float price) void
        +setCategoryId(string categoryId) void
        +setSupplierId(string supplierId) void
        +setMinStockLevel(int minStockLevel) void
        +setUpdatedAt(DateTime updatedAt) void
        +isLowStock() bool
        +isOutOfStock() bool
        +toDocument() array
        +fromDocument(mixed document) Inventory
        -parseDate(mixed dateValue) DateTime
        +validate() void
        +getTotalValue() float
        +__toString() string
        +toArray() array
    }

    class AnalysisResult {
        -analysisType string
        -findings array
        -recommendations array
        -confidenceScore float
        -supportingData array
        -isFallback bool
        -errorMessage string|null
        +__construct(string analysisType, array findings, array recommendations, float confidenceScore, array supportingData, bool isFallback, string errorMessage)
        +getAnalysisType() string
        +getFindings() array
        +getRecommendations() array
        +getConfidenceScore() float
        +getSupportingData() array
        +isFallback() bool
        +getErrorMessage() string|null
        +toArray() array
        +isValid() bool
        +getSummary() string
    }

    %% ========== REPORTING MODELS ==========
    class DateRangeFilter {
        -startDate DateTime
        -endDate DateTime
        -timezone string
        +__construct(DateTime startDate, DateTime endDate, string timezone)
        +getStartDate() DateTime
        +getEndDate() DateTime
        +getTimezone() string
        +validate() void
        +toArray() array
        +jsonSerialize() array
        +static fromArray(array data) DateRangeFilter
        +static today(string timezone) DateRangeFilter
        +static yesterday(string timezone) DateRangeFilter
        +static thisWeek(string timezone) DateRangeFilter
        +static lastWeek(string timezone) DateRangeFilter
        +static thisMonth(string timezone) DateRangeFilter
        +static lastMonth(string timezone) DateRangeFilter
        +static createLast7Days(string timezone) DateRangeFilter
        +static createLast30Days(string timezone) DateRangeFilter
        +getDayCount() int
        +containsDate(DateTime date) bool
        +__toString() string
    }

    class ExportJob {
        -id string
        -format string
        -status string
        -filePath string|null
        -fileSize int|null
        -createdAt DateTime
        -startedAt DateTime|null
        -completedAt DateTime|null
        -errorMessage string|null
        -metadata array
        -progress float
        -downloadUrl string|null
        +__construct(string id, string format, string status, string filePath, int fileSize, DateTime createdAt, DateTime startedAt, DateTime completedAt, string errorMessage, array metadata, float progress, string downloadUrl)
        +getId() string
        +getFormat() string
        +getStatus() string
        +getFilePath() string|null
        +getFileSize() int|null
        +getCreatedAt() DateTime
        +getStartedAt() DateTime|null
        +getCompletedAt() DateTime|null
        +getErrorMessage() string|null
        +getMetadata() array
        +getProgress() float
        +getDownloadUrl() string|null
        +setStatus(string status) self
        +setFilePath(string filePath) self
        +setFileSize(int fileSize) self
        +setStartedAt(DateTime startedAt) self
        +setCompletedAt(DateTime completedAt) self
        +setErrorMessage(string errorMessage) self
        +setMetadata(array metadata) self
        +setProgress(float progress) self
        +setDownloadUrl(string downloadUrl) self
        +addMetadata(string key, mixed value) self
        +validate() void
        +isFinished() bool
        +isProcessing() bool
        +isSuccess() bool
        +getEstimatedTimeRemaining() int|null
        +getDuration() int|null
        +toArray() array
        +jsonSerialize() array
        +static fromArray(array data) ExportJob
        +static create(string format, array metadata) ExportJob
        +markAsStarted() self
        +updateProgress(float progress, array metadata) self
        +markAsCompleted(string filePath, int fileSize, string downloadUrl) self
        +markAsFailed(string errorMessage) self
        +getSummary() string
        +__toString() string
    }

    class ReportDefinition {
        -id string|null
        -type string
        -name string
        -description string
        -filters array
        -columns array
        -sorting array
        -dateRange DateRangeFilter|null
        -createdBy string|null
        -createdAt DateTime
        -updatedAt DateTime
        -metadata array
        +__construct(string type, string name, string description, array filters, array columns, array sorting, DateRangeFilter dateRange, string createdBy, string id, DateTime createdAt, DateTime updatedAt, array metadata)
        +getId() string|null
        +getType() string
        +getName() string
        +getDescription() string
        +getFilters() array
        +getColumns() array
        +getSorting() array
        +getDateRange() DateRangeFilter|null
        +getCreatedBy() string|null
        +getCreatedAt() DateTime
        +getUpdatedAt() DateTime
        +getMetadata() array
        +setType(string type) self
        +setName(string name) self
        +setDescription(string description) self
        +setFilters(array filters) self
        +setColumns(array columns) self
        +setSorting(array sorting) self
        +setDateRange(DateRangeFilter dateRange) self
        +setCreatedBy(string createdBy) self
        +setMetadata(array metadata) self
        +validate() bool
        +getFilteredColumns() array
        +toArray() array
        +jsonSerialize() array
        +static fromArray(array data) ReportDefinition
        +static createSimple(string type, string name, DateRangeFilter dateRange, array filters) ReportDefinition
        +isValidForExecution() bool
        +getSummary() string
        +__toString() string
    }

    class ReportResult {
        -id string
        -definition ReportDefinition
        -summary array
        -details array
        -insights array
        -recommendations array
        -metadata Metadata
        -generatedAt DateTime
        -errorMessage string|null
        -pagination array
        +__construct(ReportDefinition definition, array summary, array details, array insights, array recommendations, Metadata metadata, DateTime generatedAt, string errorMessage, string id, array pagination)
        +getId() string
        +getDefinition() ReportDefinition
        +getSummary() array
        +getDetails(int page, int perPage) PaginatedResult
        +getAllDetails() array
        +getInsights() array
        +getRecommendations() array
        +getMetadata() Metadata
        +getGeneratedAt() DateTime
        +getErrorMessage() string|null
        +getPagination() array
        +setSummary(array summary) self
        +setDetails(array details) self
        +setInsights(array insights) self
        +setRecommendations(array recommendations) self
        +setMetadata(Metadata metadata) self
        +setErrorMessage(string errorMessage) self
        +setPagination(array pagination) self
        +validate() bool
        +isSuccess() bool
        +hasData() bool
        +getRecordCount() int
        +getExecutionTime() float
        +toArray() array
        +jsonSerialize() array
        +static fromArray(array data) ReportResult
        +static createSuccess(ReportDefinition definition, array summary, array details, array insights, array recommendations, float executionTime) ReportResult
        +static createError(ReportDefinition definition, string errorMessage, float executionTime) ReportResult
        +getSummaryText() string
        +__toString() string
    }

    class ReportSchedule {
        -id string
        -definition ReportDefinition
        -frequency string
        -recipients array
        -formats array
        -enabled bool
        -lastRun DateTime|null
        -nextRun DateTime|null
        -metadata array
        -createdAt DateTime
        -updatedAt DateTime
        +__construct(ReportDefinition definition, string frequency, array recipients, array formats, bool enabled, DateTime lastRun, DateTime nextRun, array metadata, string id, DateTime createdAt, DateTime updatedAt)
        +getId() string
        +getDefinition() ReportDefinition
        +getFrequency() string
        +getRecipients() array
        +getFormats() array
        +isEnabled() bool
        +getLastRun() DateTime|null
        +getNextRun() DateTime|null
        +getMetadata() array
        +getCreatedAt() DateTime
        +getUpdatedAt() DateTime
        +setFrequency(string frequency) self
        +setRecipients(array recipients) self
        +setFormats(array formats) self
        +setEnabled(bool enabled) self
        +setMetadata(array metadata) self
        +addRecipient(string email, string name) self
        +removeRecipient(string email) self
        +validate() void
        +calculateNextRun() DateTime
        +shouldRun() bool
        +markAsRun() self
        +skipNextRun() self
        +getScheduleDescription() string
        +getStatus() string
        +toArray() array
        +jsonSerialize() array
        +static fromArray(array data) ReportSchedule
        +static createSimple(ReportDefinition definition, string frequency, array recipients, bool enabled) ReportSchedule
        +static createCustom(ReportDefinition definition, int interval, string unit, array recipients, bool enabled) ReportSchedule
        +getSummary() string
        +__toString() string
    }

    class Metadata {
        -executionTime float
        -recordCount int
        -status string
        -additionalInfo array
        +__construct(float executionTime, int recordCount, string status, array additionalInfo)
        +getExecutionTime() float
        +getRecordCount() int
        +getStatus() string
        +getAdditionalInfo() array
        +setExecutionTime(float executionTime) self
        +setRecordCount(int recordCount) self
        +setStatus(string status) self
        +setAdditionalInfo(array additionalInfo) self
        +addInfo(string key, mixed value) self
        +validate() void
        +toArray() array
        +jsonSerialize() array
        +static fromArray(array data) Metadata
    }

    class PaginatedResult {
        -data array
        -totalItems int
        -currentPage int
        -perPage int
        -totalPages int
        +__construct(array data, int totalItems, int currentPage, int perPage, int totalPages)
        +getData() array
        +getTotalItems() int
        +getCurrentPage() int
        +getPerPage() int
        +getTotalPages() int
        +hasNextPage() bool
        +hasPreviousPage() bool
        +getNextPage() int|null
        +getPreviousPage() int|null
        +toArray() array
        +jsonSerialize() array
    }

    %% ========== DASHBOARD MODELS ==========
    class DashboardMetrics {
        -generatedAt DateTime
        -inventory array
        -users array
        -ai array
        -system array
        -trends array
        -alerts array
        +__construct(DateTime generatedAt, array inventory, array users, array ai, array system, array trends, array alerts)
        +getGeneratedAt() DateTime
        +getInventory() array
        +getUsers() array
        +getAi() array
        +getSystem() array
        +getTrends() array
        +getAlerts() array
        +setInventory(array inventory) self
        +setUsers(array users) self
        +setAi(array ai) self
        +setSystem(array system) self
        +setTrends(array trends) self
        +setAlerts(array alerts) self
        +toArray() array
        +jsonSerialize() array
        +isValid() bool
        +getSummary() string
    }

    class DashboardException {
        -errorCode string
        -context array
        +SERVICE_UNAVAILABLE = 'DASH_001'
        +INVALID_DATA = 'DASH_002'
        +CACHE_ERROR = 'DASH_003'
        +__construct(string message, string errorCode, array context, int code, Throwable previous)
        +getErrorCode() string
        +getContext() array
        +serviceUnavailable(string serviceName, Throwable previous) self
        +invalidData(string message, array context) self
        +cacheError(string message, Throwable previous) self
    }

    %% ========== REPOSITORIES ==========
    class MongoCategoryRepository {
        -collection Collection
        -logger Logger
        +__construct(Logger logger)
        +createIndexes() array
        +findById(string id) array|null
        +find(array filter, array options) array
        +findOne(array filter) array|null
        +create(array data) string
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter) int
        +findBySlug(string slug) array|null
        +findActive() array
        +findByParentId(string parentId) array
        +findRootCategories() array
        +getCategoryTree() array
        +findByDepth(int depth) array
        +updatePath(string categoryId, array path, int depth) bool
        +slugExists(string slug, string excludeId) bool
        +getCategoriesWithCounts() array
        +bulkUpdateStatus(array categoryIds, bool active) bool
        -documentToArray(mixed document) array
        -normalizeToUTCDateTime(mixed value) UTCDateTime
    }

    class InventoryRepository {
        +__construct(LoggerInterface logger)
        +createIndexes() array
        -documentToArray(mixed document) array
        -normalizeToUTCDateTime(mixed value) UTCDateTime
    }

    class UserRepository {
        +__construct(Collection collection, LoggerInterface logger)
        +findUserById(string id) User|null
        +findUserByUsername(string username) User|null
        +findUserByEmail(string email) User|null
        +saveUser(User user) string
        +deleteUser(User user) bool
        +usernameExists(string username) bool
        +emailExists(string email) bool
        +createIndexes() array
        -documentToArray(mixed document) array
        -normalizeToUTCDateTime(mixed value) UTCDateTime
        -parseDuplicateError(string mongoMessage) string
    }

    class MongoTokenRepository {
        +__construct(Logger logger)
        +storeRefreshToken(string tokenHash, string userId, DateTime expiresAt) bool
        +revokeRefreshToken(string tokenHash) bool
        +isRefreshTokenRevoked(string tokenHash) bool
        +findRefreshToken(string tokenHash) array|null
        +cleanupExpiredTokens() int
    }

    class SupplierRepository {
        // Implementation details
    }

    %% ========== SERVICES ==========
    class CategoryService {
        -categoryRepo ICategoryRepository
        -logger Logger
        +__construct(ICategoryRepository categoryRepo, Logger logger)
        +findById(string id) array|null
        +find(array filter, array options) array
        +create(array data) array
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter) int
        +validate(array data) bool
        +findOne(array filter) array|null
        +getCategoryTree() array
        +getSubcategories(string parentId) array
        +getRootCategories() array
        +getCategoryPath(string categoryId) array
        +moveCategory(string categoryId, string newParentId) array
        +validateCategoryData(array data, bool isUpdate) array
        +bulkUpdateStatus(array categoryIds, bool active) array
        +getCategoryStatistics() array
        +categoryExists(string id) bool
        +slugExists(string slug, string excludeId) bool
        +findBySlug(string slug) array|null
        -updateCategoryTree(string categoryId) void
    }

    class UserService {
        +__construct(UserRepository userRepository, Logger logger)
        +findByUsername(string username) array|null
        +findByEmail(string email) array|null
        -convertToArray(array userData) array
    }

    class InventoryService {
        +__construct(IInventoryRepository inventoryRepo, Logger logger)
        +getItemsByCategory(string categoryId, array options) array
        +getItemsBySupplier(string supplierId, array options) array
        -calculateInventoryHealth(array stats) string
    }

    class AuthService {
        +__construct(UserService userService, ITokenService tokenService, Logger logger)
        +validatePasswordStrength(string password) array
        -generateTokens(array user) array
    }

    class JwtTokenService {
        +__construct(string secretKey, string algorithm, int accessTokenExpiry, int refreshTokenExpiry, Logger logger, ITokenRepository tokenRepository)
        +generateAccessToken(array user) string
        +generateRefreshToken(array user) string
        +verifyAccessToken(string token) array|false
        +verifyRefreshToken(string token) array|false
        +revokeRefreshToken(string token) bool
        +isRefreshTokenRevoked(string token) bool
        +getAccessTokenExpiry() int
        +getRefreshTokenExpiry() int
    }

    class AIService {
        -strategies array
        -activeStrategy AIStrategy|null
        -logger Logger
        -enabled bool
        +__construct(Logger logger, bool enabled)
        +registerStrategy(string name, AIStrategy strategy) void
        +setStrategy(string strategyName) bool
        +analyzeInventory(array inventoryData, string analysisType) array
        +generateReport(array inventoryData, string reportType) array
        +predictStockNeeds(array items, int forecastDays) array
        +detectAnomalies(array inventoryData) array
        +getAvailableStrategies() array
        +isAvailable() bool
        +analyzeSalesTrends(array salesData, int periodDays) array
        +predictInventoryTurnover(array items) array
        +optimizeStockLevels(array inventoryData) array
        +generatePurchaseRecommendations(array supplierData) array
        +calculateSafetyStock(array itemHistory) array
        +analyzeInventoryWithStats(array inventoryData, string analysisType) array
        -validateInventoryData(array data) void
        -getFallbackAnalysis(array inventoryData, string analysisType) array
        -getFallbackReport(array inventoryData, string reportType) array
        -validateSalesData(array salesData) void
        -validateInventoryItems(array items) void
        -validateStockOptimizationData(array inventoryData) void
        -validateSupplierData(array supplierData) void
        -validateItemHistory(array itemHistory) void
        -getFallbackSalesTrends(array salesData, int periodDays) array
        -getFallbackTurnoverPrediction(array items) array
        -getFallbackStockOptimization(array inventoryData) array
        -getFallbackPurchaseRecommendations(array supplierData) array
        -getFallbackSafetyStock(array itemHistory) array
        -getFallbackInventoryAnalysis(array inventoryData, string analysisType) array
    }

    class OllamaStrategy {
        -httpClient HttpClient
        -logger Logger
        -baseUrl string
        -model string
        -defaultOptions array
        +__construct(HttpClient httpClient, Logger logger, string baseUrl, string model)
        +analyze(array data, string analysisType) array
        +generate(array data, string reportType) array
        +isAvailable() bool
        -callOllamaAPI(string prompt) array
        -buildAnalysisPrompt(array data, string analysisType) string
        -buildReportPrompt(array data, string reportType) string
        -parseAnalysisResponse(array response, string analysisType) array
        -parseReportResponse(array response, string reportType) array
        -validateData(array data) void
        -performBasicAnalysis(array data, string analysisType) array
        -analyzeSalesTrends(array data) array
        -analyzeInventoryTurnover(array data) array
        -optimizeStockLevels(array data) array
        -generatePurchaseRecommendations(array data) array
        -calculateSafetyStock(array data) array
        -buildSalesTrendsPrompt(array data) string
        -buildInventoryTurnoverPrompt(array data) string
        -buildStockOptimizationPrompt(array data) string
        -buildPurchaseRecommendationsPrompt(array data) string
        -buildSafetyStockPrompt(array data) string
        -parseSalesTrendsResponse(array response) array
        -parseInventoryTurnoverResponse(array response) array
        -parseStockOptimizationResponse(array response) array
        -parsePurchaseRecommendationsResponse(array response) array
        -parseSafetyStockResponse(array response) array
    }

    class AdvancedAnalysisStrategy {
        -logger Logger
        -mlModels array
        -mlEnabled bool
        +__construct(Logger logger, bool mlEnabled)
        +analyze(array data, string analysisType) array
        +generate(array data, string reportType) array
        +isAvailable() bool
        -analyzeSalesTrendsWithML(array data) array
        -predictTurnoverWithML(array data) array
        -optimizeStockWithML(array data) array
        -linearRegressionAnalysis(array salesData) array
        -randomForestTurnoverPrediction(array item) float
        -geneticAlgorithmOptimization(array item) array
        -initializeMLModels() array
        -validateData(array data) void
        -calculateConfidence(array data) float
        -basicSalesTrendAnalysis(array salesData, int periodDays) array
        -basicTurnoverPrediction(array items) array
        -basicStockOptimization(array inventoryData) array
        -fallbackAnalysis(array data, string analysisType) array
        -fallbackReport(array data, string reportType) array
    }

    class InventoryAnalysisService {
        -aiService AIService
        -inventoryService InventoryService
        -logger Logger
        -cache array
        -cacheTtl int
        +__construct(AIService aiService, InventoryService inventoryService, Logger logger, int cacheTtl)
        +getComprehensiveAnalysis(array options) array
        +generateWeeklyReport() array
        +monitorCriticalItems() array
        +predictInventoryNeeds(int forecastDays) array
        +optimizeInventory() array
        -executeParallel(array operations) array
        -parallelExecution(array operations) array
        -optimizedAIAnalysis(array data) array
        -batchStockOptimization(array items) array
        -optimizedSalesTrendsAnalysis(array items) array
        -stratifiedSample(array items, int sampleSize) array
        -generateCacheKey(string type, array params) string
        -getFromCache(string key) array|null
        -setCache(string key, array data) void
        -calculatePerformanceMetrics(float startTime) array
        -calculateOverallRisk(array recommendations) string
        -processIncrementalWeeklyData() array
        -generateIncrementalInsights(DateTime startDate) array
        -calculateIncrementalMetrics(DateTime startDate) array
        -analyzeSalesTrends(array items) array
        -prepareOptimizationData(array items) array
        -estimateDailyUsage(array item) float
        -calculateUrgencyLevel(array item) string
        -calculateWeeklyMetrics(array stats, array recentItems) array
        -calculateTurnoverRatio(array stats) float
        -calculateOutOfStockPercentage(array stats) float
        -generatePurchaseRecommendations(array items) array
        -prepareSupplierData(array items) array
        -calculateSavingsPotential(array currentItems, array optimizationResult) array
        -generateImplementationPlan(array optimizationResult) array
        -getFallbackAnalysis() array
        -getFallbackWeeklyReport() array
        -getFallbackMonitoring() array
        -getFallbackPrediction(int days) array
        -getFallbackOptimization() array
    }

    class SupplierService {
        // Implementation details
    }

    %% ========== DASHBOARD SERVICES ==========
    class DashboardService {
        -inventoryMetrics InventoryMetrics
        -userMetrics UserMetrics
        -aiMetrics AIMetrics
        -systemMetrics SystemMetrics
        -logger LoggerInterface
        -cache array
        -cacheTtl int
        +__construct(InventoryMetrics inventoryMetrics, UserMetrics userMetrics, AIMetrics aiMetrics, SystemMetrics systemMetrics, LoggerInterface logger)
        +getDashboardMetrics(bool forceRefresh, bool detailed) DashboardMetrics
        +getCacheStats() array
        +clearCache() void
        +setCacheTtl(int seconds) void
        -collectAllMetrics(bool detailed) array
        -generateTrends(array metrics) array
        -generateAlerts(array metrics) array
        -generateCacheKey(bool detailed) string
        -isCacheValid(string cacheKey) bool
        -cacheMetrics(string cacheKey, DashboardMetrics metrics) void
        -cleanupCache() void
        -getFallbackInventoryMetrics() array
        -getFallbackUserMetrics() array
        -getFallbackAIMetrics() array
        -getFallbackSystemMetrics() array
    }

    class AIMetrics {
        -aiService AIService
        -logger LoggerInterface
        +__construct(AIService aiService, LoggerInterface logger)
        +getAIMetrics(string period) array
        +getAIAlerts() array
        -calculateStartDate(string period) DateTime
        -calculatePerformanceMetrics(array analyses) array
        -calculateAccuracyMetrics(array analyses) array
        -getStrategyMetrics(array analyses) array
        -getRecentAnalyses(array analyses, int limit) array
    }

    class InventoryMetrics {
        -inventoryService InventoryService
        -logger LoggerInterface
        +__construct(InventoryService inventoryService, LoggerInterface logger)
        +getInventoryMetrics(bool detailed) array
        +getInventoryAlerts() array
        -getValueAnalysis() array
        -getMovementMetrics() array
    }

    class UserMetrics {
        -userService UserService
        -logger LoggerInterface
        +__construct(UserService userService, LoggerInterface logger)
        +getUserMetrics() array
        +getUserAlerts() array
        -getRoleDistribution() array
        -getTodayLoginCount() int
        -getCurrentlyActiveUsers() int
        -getAverageSessionTime() string
        -getRecentActivity(int limit) array
    }

    class SystemMetrics {
        -dbManager MongoDBManager
        -performanceBenchmark PerformanceBenchmark
        -logger LoggerInterface
        -cache array
        -cacheHits int
        -cacheMisses int
        +__construct(MongoDBManager dbManager, PerformanceBenchmark performanceBenchmark, LoggerInterface logger)
        +getSystemMetrics() array
        +getSystemAlerts() array
        +recordCacheHit() void
        +recordCacheMiss() void
        -checkSystemHealth() array
        -getPerformanceMetrics() array
        -getDatabaseMetrics() array
        -getMemoryMetrics() array
        -getCacheMetrics() array
        -calculateRequestsPerMinute(array benchmarkResults) int
        -calculateErrorRate(array benchmarkResults) float
        -getAverageResponseTime() float
        -convertToBytes(string size) int
        -formatBytes(int bytes, int precision) string
    }

    class MetricsCalculator {
        +calculateHealthStatus(int lowStockCount, int outOfStockCount, int totalItems) string
        +calculateDatabaseHealth(float latency, float errorRate, float throughput) float
        +calculateCacheEfficiency(float hitRate, float memoryUsage, float responseTimeImprovement) float
        +determineTrend(float current, float previous) string
        +calculateChangePercentage(float current, float previous) float
        +calculateMovingAverage(array data, int period) float
        +calculateSuccessRate(int successful, int total) float
        +calculateAverageConfidence(array analyses) float
    }

    %% ========== REPORTING SERVICES ==========
    class InventoryReportBuilder {
        -inventoryService IInventoryService
        -aiService AIService
        -logger LoggerInterface
        +__construct(IInventoryService inventoryService, AIService aiService, LoggerInterface logger)
        +buildReport(ReportDefinition definition) ReportResult
        +buildComparativeReport(ReportDefinition definition, array comparisonData) ReportResult
        +buildPredictiveReport(ReportDefinition definition, int forecastDays) ReportResult
        +buildRealTimeReport(ReportDefinition definition) ReportResult
        -buildInventoryFilters(ReportDefinition definition) array
        -generateSummary(array inventoryData) array
        -calculateInventoryHealth(int totalItems, int lowStockCount, int outOfStockCount) float
        -getHealthStatus(float score) string
        -generateAIInsights(array inventoryData) array
        -generateBasicInsights(array inventoryData) array
        -generateRecommendations(array summary, array insights) array
        -analyzeComparativeData(array currentSummary, array comparisonData) array
        -generatePredictiveSummary(array currentData, array predictions, int forecastDays) array
        -generatePredictiveInsights(array predictions) array
        -generatePredictiveRecommendations(array predictions) array
        -calculateAlertLevel(array lowStockItems, array outOfStockItems) string
        -generateRealTimeInsights(array lowStockItems, array outOfStockItems) array
        -generateRealTimeRecommendations(array lowStockItems, array outOfStockItems) array
    }

    class ReportingService {
        -builders array
        -exporter ReportExporter
        -scheduler ReportScheduler
        -analyzer ReportAnalyzer
        -logger LoggerInterface
        -cache array
        -cacheTtl int
        +__construct(IInventoryService inventoryService, UserService userService, AIService aiService, DashboardService dashboardService, LoggerInterface logger, int cacheTtl)
        +generateReport(ReportDefinition definition) ReportResult
        +generateRealTimeReport(string type, array filters) ReportResult
        +scheduleReport(ReportSchedule schedule) string
        +cancelSchedule(string scheduleId) bool
        +getReportHistory(string reportType, DateRange range) array
        +exportReport(ReportResult result, string format) ExportJob
        +getExportStatus(string jobId) ExportJob
        +analyzeReportTrends(ReportResult current, ReportResult previous) array
        +generatePredictiveReport(string type, int forecastPeriod) ReportResult
        +getAvailableReportTypes() array
        +validateReportDefinition(ReportDefinition definition) array
        +testReportGeneration(ReportDefinition definition) ReportResult
        -initializeBuilders(IInventoryService inventoryService, UserService userService, AIService aiService, DashboardService dashboardService) void
        -getBuilderForType(string type) object
        -generateCacheKey(ReportDefinition definition) string
        -isCacheValid(string cacheKey) bool
        -cacheResult(string cacheKey, ReportResult result) void
        -cleanupCache() void
        +getCacheStats() array
        +clearCache() void
        +setCacheTtl(int seconds) void
    }

    class ReportExporter {
        -logger LoggerInterface
        +__construct(LoggerInterface logger)
        +export(ReportResult result, string format) ExportJob
        +getStatus(string jobId) ExportJob
    }

    class ReportScheduler {
        -logger LoggerInterface
        +__construct(LoggerInterface logger)
        +schedule(ReportSchedule schedule) string
        +cancel(string scheduleId) bool
        +recordCacheHit() void
    }

    class ReportAnalyzer {
        -logger LoggerInterface
        +__construct(LoggerInterface logger)
        +analyzeTrends(ReportResult current, ReportResult previous) array
    }

    %% ========== INFRASTRUCTURE ==========
    class MongoDBManager {
        -static Client client
        -static Database database
        -static LoggerInterface logger
        +initialize(LoggerInterface logger) void
        +getClient() Client
        +getDatabase() Database
        +getCollection(string name) Collection
        +ping() bool
        +startSession() Session|null
        +getConnectionInfo() array
        +createIndexes(string collectionName, array indexes) array
        +collectionExists(string collectionName) bool
        +getStats() array
        +getCollectionStats(string collectionName) array
        +dropCollection(string collectionName) array
        +getServerInfo() array
        +getServerVersion() array
        +reset() void
        +getLogger() LoggerInterface
        +setLogger(LoggerInterface logger) void
    }

    class Logger {
        -logFile string
        -defaultLevel string
        +__construct(string logFile, string defaultLevel)
        +log(mixed level, string|Stringable message, array context) void
        +debug(string|Stringable message, array context) void
        +info(string|Stringable message, array context) void
        +error(string|Stringable message, array context) void
        +warning(string|Stringable message, array context) void
        +getLogFile() string
    }

    class HttpClient {
        -defaultOptions array
        +__construct(array defaultOptions)
        +get(string url, array options) array
        +post(string url, mixed data, array options) array
        +put(string url, mixed data, array options) array
        +delete(string url, array options) array
        +isUrlReachable(string url, float timeout) bool
        +setDefaultOptions(array options) void
        +getDefaultOptions() array
        -request(string method, string url, mixed data, array options) array
        -createStreamContext(string method, mixed data, array options) resource
        -executeRequest(string url, resource context, array options) array
    }

    class PerformanceBenchmark {
        -static array benchmarks
        -static bool enabled
        +enable() void
        +disable() void
        +measure(callable fn, string operation, array context) mixed
        +measureBatch(array operations, bool parallel) array
        +getResults() array
        +getLatestResult() array|null
        +clear() void
        +generateReport() array
        +meetsThreshold(string operation, float maxDuration, int maxMemory) bool
        -recordBenchmark(string operation, float duration, int memoryUsed, array context) void
        -measureParallel(array operations) array
    }

    class Router {
        -routes array
        -routeGroups array
        -notFoundHandler callable
        -currentGroupPrefix string
        -testMode bool
        +__construct()
        +enableTestMode() void
        +get(string path, mixed handler) self
        +post(string path, mixed handler) self
        +put(string path, mixed handler) self
        +delete(string path, mixed handler) self
        +patch(string path, mixed handler) self
        +options(string path, mixed handler) self
        +any(string path, mixed handler) self
        +addRoute(string method, string path, mixed handler) self
        +group(string prefix, callable callback) self
        +setNotFoundHandler(callable handler) self
        +dispatch(string method, string path) mixed
        -executeHandler(mixed handler, array params) mixed
        -matchRoute(string routePath, string requestPath, array& params) bool
        -handleNotFound() mixed
        -normalizePath(string path) string
        +getRoutes() array
        +clearRoutes() void
    }

    class Request {
        -get array
        -post array
        -server array
        -headers array
        -cookies array
        -files array
        -input string
        +__construct(array get, array post, array server, array cookies, array files, string input)
        +get(string key, mixed default) mixed
        +post(string key, mixed default) mixed
        +server(string key, mixed default) mixed
        +header(string key, mixed default) mixed
        +cookie(string key, mixed default) mixed
        +file(string key) mixed
        +method() string
        +path() string
        +isGet() bool
        +isPost() bool
        +isPut() bool
        +isDelete() bool
        +isAjax() bool
        +isSecure() bool
        +ip() string
        +userAgent() string
        +getInput() string
        +json() array
        +has(string type, string key) bool
        +all(string type) array
    }

    class Response {
        -content string
        -statusCode int
        -headers array
        +__construct(string content, int statusCode, array headers)
        +setContent(string content) self
        +setStatusCode(int statusCode) self
        +setHeader(string name, string value) self
        +json(array data, int statusCode) self
        +redirect(string url, int statusCode) self
        +send() void
        +getContent() string
        +getStatusCode() int
        +getHeaders() array
    }

    %% ========== CONTROLLERS ==========
    class BaseController {
        #logger Logger
        #requestData array
        #testMode bool
        #lastResponse array|null
        +__construct(Logger logger)
        +enableTestMode() void
        +setRequestData(array data) void
        #parseRequestData() void
        #getRequestValue(string key, mixed default) mixed
        #getRequestData() array
        #jsonResponse(array data, int statusCode) array|null
        #successResponse(array data, string message, int statusCode) array|null
        #errorResponse(string message, array errors, int statusCode) array|null
        #notFoundResponse(string message) array|null
        #unauthorizedResponse(string message) array|null
        #validationErrorResponse(array errors, string message) array|null
        #getAuthUserId() string|null
        #isAuthenticated() bool
        #validateRequiredFields(array fields) array
        #logAction(string action, array context) void
        #getPaginationParams() array
        #getSortingParams() array
        +buildTestResponse(array data, int statusCode, bool success, string message) array
        +getLastResponse() array
    }

    class CategoryController {
        -categoryService CategoryService
        +__construct(CategoryService categoryService, Logger logger)
        +listCategories() void
        +getCategory(string id) void
        +getCategoryBySlug(string slug) void
        +createCategory() void
        +updateCategory(string id) void
        +deleteCategory(string id) void
        +getCategoryTree() void
        +getSubcategories(string id) void
        +getRootCategories() void
        +getCategoryPath(string id) void
        +moveCategory(string id) void
        +bulkUpdateStatus() void
        +getStatistics() void
        +searchCategories() void
        -validateCategoryId(string id) void
        -validateCreateCategoryData(array data) array
        -validateUpdateCategoryData(array data) array
        -buildFilterFromRequest() array
        -logAction(string action, array context) void
    }

    class AuthController {
        -authService AuthService
        -userService UserService
        +__construct(AuthService authService, UserService userService, Logger logger)
        +register() void
        +login() void
        +refreshToken() void
        +logout() void
        +profile() void
        +changePassword() void
    }

    class UserController {
        -userService UserService
        +__construct(UserService userService, Logger logger)
        +listUsers() void
        +getUser(string id) void
        +createUser() void
        +updateUser(string id) void
        +deleteUser(string id) void
    }

    class InventoryController {
        -inventoryService InventoryService
        +__construct(InventoryService inventoryService, Logger logger)
        +listItems() void
        +getItem(string id) void
        +createItem() void
        +updateItem(string id) void
        +deleteItem(string id) void
        +getLowStock() void
        +getOutOfStock() void
        +getStats() void
        +searchItems() void
        +updateQuantity(string id) void
    }

    class AIAnalysisController {
        -analysisService InventoryAnalysisService
        -aiService AIService
        +__construct(InventoryAnalysisService analysisService, AIService aiService, Logger logger)
        +getComprehensiveAnalysis() array|null
        +generateWeeklyReport() array|null
        +monitorCriticalItems() array|null
        +predictInventoryNeeds(int days) array|null
        +optimizeInventory() array|null
        +analyzeSalesTrends() array|null
        +getAIStatus() array|null
        -createMockAnalysisService() InventoryAnalysisService
    }

    class DashboardController {
        -dashboardService DashboardService
        -logger LoggerInterface
        +__construct(DashboardService dashboardService, LoggerInterface logger)
        +getMetrics(Request request) JsonResponse
        +getHealth(Request request) JsonResponse
        +clearCache(Request request) JsonResponse
        +getCacheStats(Request request) JsonResponse
        -getHttpStatusCode(DashboardException e) int
    }

    class ReportingController {
        -reportingService IReportingService
        +__construct(IReportingService reportingService, Logger logger)
        +getInventoryReport(Request request) JsonResponse
        +getAdvancedInventoryReport(Request request) JsonResponse
        +getUserActivityReport(Request request) JsonResponse
        +getAIPerformanceReport(Request request) JsonResponse
        +getSystemAuditReport(Request request) JsonResponse
        +createCustomReport(Request request) JsonResponse
        +getAvailableReportTypes(Request request) JsonResponse
        +getCacheStats(Request request) JsonResponse
        +clearCache(Request request) JsonResponse
        -buildReportResponse(ReportResult result, float responseTime) JsonResponse
        -buildFiltersFromRequest(Request request) array
        -buildDateRangeFromRequest(Request request) DateRangeFilter|null
        -createDateRangeFromPeriod(string period) DateRangeFilter|null
        -buildReportDefinitionFromRequest(array requestData, string defaultType) ReportDefinition
        -buildDateRangeFromArray(array dateRangeData) DateRangeFilter|null
        -validateCustomReportData(array data) array
        -simulateSaveDefinition(ReportDefinition definition) ReportDefinition
        -getRequestData(Request request) array
    }

    class SupplierController {
        -supplierService ISupplierService
        +__construct(ISupplierService supplierService, Logger logger)
        +listSuppliers() void
        +getSupplier(string id) void
        +createSupplier() void
        +updateSupplier(string id) void
        +deleteSupplier(string id) void
        +getPerformance(string id) void
        +getStats() void
    }

    %% ========== MIDDLEWARE ==========
    class AuthMiddleware {
        -tokenService ITokenService
        -excludedRoutes array
        +__construct(ITokenService tokenService, array excludedRoutes)
        +handle(Request request, callable next) Response
        -extractToken(Request request) string|null
        -shouldExclude(Request request) bool
    }

    class LoggingMiddleware {
        -logger Logger
        +__construct(Logger logger)
        +handle(Request request, callable next) Response
        -logRequest(Request request) void
        -logResponse(Response response, float duration) void
    }

    class RateLimitingMiddleware {
        -maxRequests int
        -windowSeconds int
        -storage array
        +__construct(int maxRequests, int windowSeconds)
        +handle(Request request, callable next) Response
        -getClientIdentifier(Request request) string
        -isRateLimited(string identifier) bool
        -incrementRequestCount(string identifier) void
        -cleanupExpiredEntries() void
    }

    class ValidationMiddleware {
        -rules array
        +__construct(array rules)
        +handle(Request request, callable next) Response
        +setRules(array rules) void
        -validate(Request request) array
        -validateField(mixed value, string rules) array
    }

    class SecurityMiddleware {
        -corsConfig array
        +__construct(array corsConfig)
        +handle(Request request, callable next) Response
        -addSecurityHeaders(Response response) Response
        -handleCORS(Request request, Response response) Response
        -isValidOrigin(string origin) bool
    }

    %% ========== FUTURE COMPONENTS ==========
    class ReportGenerator {
        -inventoryService InventoryService
        -supplierService ISupplierService
        -categoryService CategoryService
        -logger Logger
        +__construct(InventoryService inventoryService, ISupplierService supplierService, CategoryService categoryService, Logger logger)
        +generateInventoryReport(array options) array
        +generateStockAlertReport() array
        +generateSupplierReport(array options) array
        +generateCategoryReport(string categoryId) array
        +generateComprehensiveReport(array options) array
        +exportToCsv(array data, string filename) bool
        +exportToPdf(array data, string filename) bool
        -formatReportData(array data, string reportType) array
        -calculateReportMetrics(array data) array
    }

    class CacheManager {
        -cache array
        -ttl array
        -maxSize int
        -hits int
        -misses int
        +__construct(int maxSize)
        +get(string key) mixed
        +set(string key, mixed value, int ttl) void
        +delete(string key) bool
        +clear() void
        +exists(string key) bool
        +getStats() array
        +cleanup() void
        -isExpired(string key) bool
        -evictIfNeeded() void
    }

    class NotificationService {
        -logger Logger
        -enabled bool
        +__construct(Logger logger, bool enabled)
        +sendLowStockAlert(array items) bool
        +sendOutOfStockAlert(array items) bool
        +sendInventoryReport(array report) bool
        +sendSystemAlert(string message, string level) bool
        -logNotification(string type, array data) void
        -shouldSendNotification(string type) bool
    }

    class EmailNotifier {
        -smtpConfig array
        -logger Logger
        +__construct(array smtpConfig, Logger logger)
        +sendEmail(string to, string subject, string body) bool
        +sendBulkEmails(array recipients, string subject, string body) array
        -validateEmail(string email) bool
        -logEmail(string to, string subject, bool success) void
    }

    class SMSNotifier {
        -apiConfig array
        -logger Logger
        +__construct(array apiConfig, Logger logger)
        +sendSMS(string to, string message) bool
        +sendBulkSMS(array recipients, string message) array
        -validatePhone(string phone) bool
        -logSMS(string to, string message, bool success) void
    }

    class ConfigManager {
        -static array config
        -static string configPath
        +load(string configPath) void
        +get(string key, mixed default) mixed
        +set(string key, mixed value) void
        +has(string key) bool
        +getAll() array
        +reload() void
        +save() bool
        -validateConfig(array config) bool
    }

    class ErrorHandler {
        -logger LoggerInterface
        -displayErrors bool
        +__construct(LoggerInterface logger, bool displayErrors)
        +register() void
        +handleError(int errno, string errstr, string errfile, int errline) bool
        +handleException(Throwable exception) void
        +handleShutdown() void
        -sendErrorResponse(Throwable exception) void
        -getErrorType(int errno) string
        +setDisplayErrors(bool displayErrors) void
    }

    %% ========== RELATIONSHIPS ==========
    IRepository <|.. ICategoryRepository
    IRepository <|.. IInventoryRepository
    IRepository <|.. ISupplierRepository
    IRepository <|.. ITokenRepository
    
    IService <|.. IAuthService
    IService <|.. IInventoryService
    IService <|.. ISupplierService
    IService <|.. IReportingService
    
    IReportBuilder <|.. InventoryReportBuilder
    
    ICategoryRepository <|.. MongoCategoryRepository
    IInventoryRepository <|.. InventoryRepository
    ISupplierRepository <|.. SupplierRepository
    ITokenRepository <|.. MongoTokenRepository
    
    IAuthService <|.. AuthService
    IInventoryService <|.. InventoryService
    ISupplierService <|.. SupplierService
    ITokenService <|.. JwtTokenService
    IReportingService <|.. ReportingService
    
    IAIService <|.. IAdvancedAIService
    IAIService <|.. AIService
    IAdvancedAIService <|.. AIService
    
    AIStrategy <|.. OllamaStrategy
    AIStrategy <|.. AdvancedAnalysisStrategy
    
    BaseController <|-- CategoryController
    BaseController <|-- AuthController
    BaseController <|-- UserController
    BaseController <|-- InventoryController
    BaseController <|-- AIAnalysisController
    BaseController <|-- DashboardController
    BaseController <|-- SupplierController
    BaseController <|-- ReportingController
    
    Middleware <|.. AuthMiddleware
    Middleware <|.. LoggingMiddleware
    Middleware <|.. RateLimitingMiddleware
    Middleware <|.. ValidationMiddleware
    Middleware <|.. SecurityMiddleware
    
    CategoryController --> CategoryService : uses
    CategoryService --> MongoCategoryRepository : uses
    MongoCategoryRepository --> MongoDBManager : uses
    
    AuthController --> AuthService : uses
    AuthService --> UserService : uses
    AuthService --> JwtTokenService : uses
    UserService --> UserRepository : uses
    JwtTokenService --> MongoTokenRepository : uses
    
    InventoryController --> InventoryService : uses
    InventoryService --> InventoryRepository : uses
    
    AIAnalysisController --> InventoryAnalysisService : uses
    InventoryAnalysisService --> AIService : uses
    InventoryAnalysisService --> InventoryService : uses
    AIService --> OllamaStrategy : uses
    AIService --> AdvancedAnalysisStrategy : uses
    
    DashboardController --> DashboardService : uses
    DashboardService --> InventoryMetrics : uses
    DashboardService --> UserMetrics : uses
    DashboardService --> AIMetrics : uses
    DashboardService --> SystemMetrics : uses
    InventoryMetrics --> InventoryService : uses
    UserMetrics --> UserService : uses
    AIMetrics --> AIService : uses
    SystemMetrics --> MongoDBManager : uses
    SystemMetrics --> PerformanceBenchmark : uses
    
    SupplierController --> SupplierService : uses
    SupplierService --> SupplierRepository : uses
    
    ReportGenerator --> InventoryService : uses
    ReportGenerator --> SupplierService : uses
    ReportGenerator --> CategoryService : uses
    
    NotificationService --> EmailNotifier : uses
    NotificationService --> SMSNotifier : uses
    
    OllamaStrategy --> HttpClient : uses
    
    ErrorHandler --> Logger : uses
    
    ReportingController --> ReportingService : uses
    ReportingService --> InventoryReportBuilder : uses
    ReportingService --> ReportExporter : uses
    ReportingService --> ReportScheduler : uses
    ReportingService --> ReportAnalyzer : uses
    InventoryReportBuilder --> IInventoryService : uses
    InventoryReportBuilder --> AIService : uses
    
    Router --> CategoryController : routes
    Router --> AuthController : routes
    Router --> UserController : routes
    Router --> InventoryController : routes
    Router --> AIAnalysisController : routes
    Router --> DashboardController : routes
    Router --> SupplierController : routes
    Router --> ReportingController : routes
    
    ReportResult --> ReportDefinition : contains
    ReportResult --> Metadata : contains
    ReportSchedule --> ReportDefinition : contains
    ExportJob --> ReportResult : references
    
    DashboardMetrics --> MetricsCalculator : uses
    InventoryMetrics --> MetricsCalculator : uses
    UserMetrics --> MetricsCalculator : uses
    AIMetrics --> MetricsCalculator : uses
    SystemMetrics --> MetricsCalculator : uses