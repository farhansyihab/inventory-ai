classDiagram
    note for MongoDBManager "asalnya class MongoDBManager bernama MongoClientAdapter tapi nama class ini sudah ada di library mongodib"
    %% ========== Interfaces / Abstractions ==========
    class IRepository {
        <<interface>>
        +findById(string id) array|null
        +find(array filter = [], array options = []) array
        +create(array data) string
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter = []) int
        +findOne(array filter = []) array|null
    }

    class IService {
        <<interface>>
        +findById(string id) array|null
        +find(array filter = [], array options = []) array
        +create(array data) array
        +update(string id, array data) bool
        +delete(string id) bool
        +count(array filter = []) int
        +validate(array data) bool
        +findOne(array filter = []) array|null
    }

    class IAuthService {
        <<interface>>
        +register(array userData) array
        +login(string username, string password) array
        +refreshToken(string refreshToken) array
        +logout(string refreshToken) bool
        +verifyCredentials(string username, string password) array|false
        +changePassword(string userId, string currentPassword, string newPassword) bool
    }

    class ITokenService {
        <<interface>>
        +generateAccessToken(array user) string
        +generateRefreshToken(array user) string
        +verifyAccessToken(string token) array|false
        +verifyRefreshToken(string token) array|false
        +revokeRefreshToken(string token) bool
        +isRefreshTokenRevoked(string token) bool
        +getAccessTokenExpiry() int
        +getRefreshTokenExpiry() int
    }

    class ITokenRepository {
        <<interface>>
        +storeRefreshToken(string tokenHash, string userId, DateTime expiresAt) bool
        +revokeRefreshToken(string tokenHash) bool
        +isRefreshTokenRevoked(string tokenHash) bool
        +findRefreshToken(string tokenHash) array|null
        +cleanupExpiredTokens() int
    }

    %% ========== Concrete Implementations ==========
    class UserRepository {
        +findUserById(string id) User|null
        +findUserByUsername(string username) User|null
        +findUserByEmail(string email) User|null
        +saveUser(User user) string
        +deleteUser(User user) bool
        +createIndexes() array
        -documentToArray(mixed document) array
        -normalizeToUTCDateTime(mixed value) UTCDateTime
    }

    class MongoTokenRepository {
        +storeRefreshToken(string tokenHash, string userId, DateTime expiresAt) bool
        +revokeRefreshToken(string tokenHash) bool
        +isRefreshTokenRevoked(string tokenHash) bool
        +findRefreshToken(string tokenHash) array|null
        +cleanupExpiredTokens() int
    }

    class MongoDBManager {
        +initialize(LoggerInterface logger = null) void
        +getClient() Client
        +getDatabase() Database
        +getCollection(string name) Collection
        +ping() bool
        +startSession() Session|null
        +getConnectionInfo() array
        +createIndexes(string collectionName, array indexes) array
        +collectionExists(string collectionName) bool
        +getStats() array
        +getCollectionStats(string collectionName) array
        +dropCollection(string collectionName) array
        +getServerInfo() array
        +getServerVersion() array
        +reset() void
        +getLogger() LoggerInterface
        +setLogger(LoggerInterface logger) void
    }

    class UserService {
        +findByUsername(string username) array|null
        +findByEmail(string email) array|null
        -convertToArray(array userData) array
    }

    class AuthService {
        +register(array userData) array
        +login(string username, string password) array
        +refreshToken(string refreshToken) array
        +logout(string refreshToken) bool
        +verifyCredentials(string username, string password) array|false
        +changePassword(string userId, string currentPassword, string newPassword) bool
        +validatePasswordStrength(string password) array
        -generateTokens(array user) array
    }

    class JwtTokenService {
        +generateAccessToken(array user) string
        +generateRefreshToken(array user) string
        +verifyAccessToken(string token) array|false
        +verifyRefreshToken(string token) array|false
        +revokeRefreshToken(string token) bool
        +isRefreshTokenRevoked(string token) bool
        +getAccessTokenExpiry() int
        +getRefreshTokenExpiry() int
    }

    class BaseController {
        #logger Logger
        #requestData array
        +__construct(Logger logger = null)
        #parseRequestData() void
        #getRequestValue(string key, mixed default) mixed
        #jsonResponse(array data, int statusCode = 200) void
        #successResponse(array data = [], string message = 'Success', int statusCode = 200) void
        #errorResponse(string message, array errors = [], int statusCode = 400) void
        #notFoundResponse(string message = 'Resource not found') void
        #unauthorizedResponse(string message = 'Unauthorized') void
        #validationErrorResponse(array errors, string message = 'Validation failed') void
        #getAuthUserId() string|null
        #isAuthenticated() bool
        #validateRequiredFields(array fields) array
        #logAction(string action, array context = []) void
        #getPaginationParams() array
        #getSortingParams() array
    }

    class AuthController {
        -authService AuthService
        -userService UserService
        +register() void
        +login() void
        +refreshToken() void
        +logout() void
        +profile() void
        +changePassword() void
    }

    class UserController {
        -userService UserService
        +listUsers() void
        +getUser(string id) void
        +createUser() void
        +updateUser(string id) void
        +deleteUser(string id) void
    }

    class ErrorHandler {
        -logger LoggerInterface
        -displayErrors bool
        +register() void
        +handleError(int errno, string errstr, string errfile, int errline) bool
        +handleException(Throwable exception) void
        +handleShutdown() void
        -sendErrorResponse(Throwable exception) void
        -getErrorType(int errno) string
        +setDisplayErrors(bool displayErrors) void
    }

    class Router {
        -routes array
        -routeGroups array
        -notFoundHandler callable
        -currentGroupPrefix string
        +get(string path, mixed handler) self
        +post(string path, mixed handler) self
        +put(string path, mixed handler) self
        +delete(string path, mixed handler) self
        +patch(string path, mixed handler) self
        +options(string path, mixed handler) self
        +any(string path, mixed handler) self
        +addRoute(string method, string path, mixed handler) self
        +group(string prefix, callable callback) self
        +setNotFoundHandler(callable handler) self
        +dispatch(string method, string path) mixed
        -executeHandler(mixed handler, array params = []) mixed
        -matchRoute(string routePath, string requestPath, array& params) bool
        -handleNotFound() mixed
        -normalizePath(string path) string
        +getRoutes() array
        +clearRoutes() void
    }

    class Logger {
        -logFile string
        -defaultLevel string
        +log(mixed level, string|Stringable message, array context = []) void
        +debug(string|Stringable message, array context = []) void
        +info(string|Stringable message, array context = []) void
        +error(string|Stringable message, array context = []) void
        +warning(string|Stringable message, array context = []) void
        +getLogFile() string
    }

    class User {
        -id string|null
        -username string
        -email string
        -passwordHash string
        -role string
        -createdAt DateTime
        -updatedAt DateTime
        +__construct(string username, string email, string passwordHash, string role = 'staff', string id = null, DateTime createdAt = null, DateTime updatedAt = null)
        +getId() string|null
        +getUsername() string
        +getEmail() string
        +getPasswordHash() string
        +getRole() string
        +getCreatedAt() DateTime
        +getUpdatedAt() DateTime
        +setUsername(string username) void
        +setEmail(string email) void
        +setPasswordHash(string hash) void
        +setRole(string role) void
        +setUpdatedAt(DateTime updatedAt) void
        +toDocument() array
        +fromDocument(mixed document) User
        -parseDate(mixed dateValue) DateTime
        +validate() void
        +isAdmin() bool
        +isManager() bool
        +isStaff() bool
        +toArray() array
        +__toString() string
    }

    %% ========== Relationships ==========
    IRepository <|.. UserRepository
    IService <|.. UserService
    IAuthService <|.. AuthService
    ITokenService <|.. JwtTokenService
    ITokenRepository <|.. MongoTokenRepository
    
    UserRepository --> MongoDBManager : uses
    MongoTokenRepository --> MongoDBManager : uses
    
    UserService --> UserRepository : depends on
    UserService --> Logger : depends on
    
    AuthService --> UserService : depends on
    AuthService --> ITokenService : depends on
    AuthService --> Logger : depends on
    
    JwtTokenService --> ITokenRepository : depends on
    JwtTokenService --> Logger : depends on
    
    AuthController --> AuthService : depends on
    AuthController --> UserService : depends on
    AuthController --> BaseController : extends
    
    UserController --> UserService : depends on
    UserController --> BaseController : extends
    
    BaseController --> Logger : depends on
    
    ErrorHandler --> LoggerInterface : depends on
    
    Router --> Logger : depends on (in index.php)

    %% ========== Planned Components (Belum Diimplementasi) ==========
    class IUserRepository {
        <<interface>>
        +findByUsername(string username)
        +findByEmail(string email)
    }

    class IInventoryRepository {
        <<interface>>
        +findLowStock(int threshold)
        +aggregate(array pipeline)
    }

    class ICategoryRepository {
        <<interface>>
    }

    class ISupplierRepository {
        <<interface>>
    }

    class IHashService {
        <<interface>>
        +hash(string password): string
        +verify(string password, string hash): bool
    }

    class AIStrategy {
        <<interface>>
        +generate(string prompt): array
    }

    class MongoInventoryRepository
    class MongoCategoryRepository
    class MongoSupplierRepository
    class BcryptHashService
    class Phi3Strategy
    class DeepSeekStrategy
    class OllamaStrategy

    IUserRepository <|.. UserRepository
    IInventoryRepository <|.. MongoInventoryRepository
    ICategoryRepository <|.. MongoCategoryRepository
    ISupplierRepository <|.. MongoSupplierRepository
    IHashService <|.. BcryptHashService
    AIStrategy <|.. Phi3Strategy
    AIStrategy <|.. DeepSeekStrategy
    AIStrategy <|.. OllamaStrategy

    class InventoryService {
        +createItem(array dto)
        +updateItem(string id, array dto)
        +deleteItem(string id)
        +getItem(string id)
        +listItems(array filter)
        +getLowStock(int threshold)
        +generateReport(string type)
    }

    class CategoryService
    class SupplierService
    class AuditLogService
    class AIService {
        -map<string, AIStrategy> strategies
        +registerStrategy(string name, AIStrategy s)
        +setStrategy(string name)
        +analyzeInventory(array items)
    }

    class InventoryController
    class CategoryController
    class SupplierController

    class AuthMiddleware {
        +verifyAccessToken(req,res,next)
    }
    class RoleMiddleware {
        +requireRole(string role)
    }
    class Validator {
        +validate(array schema, array data)
    }

    class InventoryItem {
        +string _id
        +string name
        +string description
        +int quantity
        +float price
        +string categoryId
        +string supplierId
        +int minStock
        +DateTime createdAt
        +DateTime updatedAt
    }

    class Category
    class Supplier
    class AuditLog

    %% ========== Future Relationships ==========
    InventoryController --> InventoryService
    CategoryController --> CategoryService
    SupplierController --> SupplierService

    InventoryService --> IInventoryRepository
    InventoryService --> ICategoryRepository
    InventoryService --> ISupplierRepository
    InventoryService --> AIService
    InventoryService --> AuditLogService

    AIService --> AIStrategy

    InventoryItem --> Category
    InventoryItem --> Supplier
    AuditLog --> User

    %% ========== Dependencies on MongoDBManager ==========
    MongoInventoryRepository --> MongoDBManager
    MongoCategoryRepository --> MongoDBManager
    MongoSupplierRepository --> MongoDBManager

    %% ========== Utility Dependencies ==========
    InventoryService --> Logger
    CategoryService --> Logger
    SupplierService --> Logger
    AIService --> Logger